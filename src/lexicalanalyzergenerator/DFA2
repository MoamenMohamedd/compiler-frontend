//package lexicalanalyzergenerator;
//
//import java.io.FileWriter;
//import java.io.IOException;
//import java.util.*;
//
//
//public class DFA extends TransitionTable {
//
//    public DFA(NFA nfa, Set<Character> inputSymbols) {
//        this.nfa = nfa;
//        this.subsets = new HashMap<>();
//        this.inputSymbols = new ArrayList<>(inputSymbols);
//
//        convert();
////        minimize();
//
//        print();
//
//    }
//
//
//    private NFA nfa;
//    private ArrayList<Character> inputSymbols;
//    private HashMap<Set<State>, State> subsets;
//    private int counter = 0;
//    private State startState;
//    private State current;
//
//    private void convert() {
//        Queue<Set<State>> queue = new ArrayDeque<>();
//        Set<Set<State>> marked = new HashSet<>();
//
//        Set<State> initialEclosure = eClosure(nfa.getStartState());
//        startState = new State(counter++, true, false);
//        subsets.put(initialEclosure, startState);
//        queue.add(initialEclosure);
//
//        while (!queue.isEmpty()) {
//            Set<State> set = queue.remove();
//            marked.add(set);
//            for (Character input : inputSymbols) {
//                Set<State> u = eClosure(move(set, input));
//
//                if (u.isEmpty()) continue;
//
//                if (!subsets.containsKey(u)) {
//                    storeNewDfaState(u);
//                    queue.add(u);
//                }
//                subsets.get(set).addEdge(subsets.get(u), input);
//            }
//        }
//    }
//
//    private void storeNewDfaState(Set<State> states) {
//        ArrayList<State> finalStates = new ArrayList<>();
//
//        for (State state : states) {
//
//            if (state.isFinal())
//                finalStates.add(state);
//        }
//
//        State state = null;
//        if (finalStates.size() == 1) {
//            state = new State(counter++, false, true);
//            state.setToken(finalStates.get(0).getToken(), finalStates.get(0).getPriority());
//        } else if (finalStates.size() > 1) {
//            finalStates.sort((s1, s2) -> s1.getPriority() - s2.getPriority());
//            state = new State(counter++, false, true);
//            state.setToken(finalStates.get(0).getToken(), finalStates.get(0).getPriority());
//        } else {
//            state = new State(counter++, false, false);
//        }
//
//        subsets.put(states, state);
//
//    }
//
//
//    private Set<State> eClosure(State state) {
//        Set<State> set = new HashSet<>();
//        eClosure(state, set);
//        return set;
//    }
//
//    private void eClosure(State state, Set<State> set) {
//        for (Edge edge : state.getEdges()) {
//            if (edge.getInput() == '~') {
//                set.add(edge.getTo());
//                eClosure(edge.getTo(), set);
//            }
//        }
//    }
//
//    private Set<State> eClosure(Set<State> states) {
//        Set<State> set = new HashSet<>();
//        eClosure(states, set);
//        return set;
//    }
//
//    private void eClosure(Set<State> states, Set<State> set) {
//        Stack<State> stack = new Stack<>();
//        for (State state : states) {
//            stack.push(state);
//            set.add(state);
//        }
//
//        while (!stack.isEmpty()) {
//            State t = stack.pop();
//            Set<State> t_eClosure = eClosure(t);
//            for (State u : t_eClosure) {
//                if (!set.contains(u)) {
//                    set.add(u);
//                    stack.push(u);
//                }
//            }
//        }
//    }
//
//    private Set<State> move(Set<State> states, Character input) {
//        Set<State> set = new HashSet<>();
//
//        for (State state : states) {
//            for (Edge edge : state.getEdges()) {
//                if (edge.getInput() == input)
//                    set.add(edge.getTo());
//            }
//        }
//
//        return set;
//    }
//
//    public void print() {
//        System.out.println("----------------------------------------");
//        super.print(startState, new HashSet<>());
//        System.out.println("----------------------------------------");
//    }
//
//    private void minimize() {
//        ArrayList<Set<State>> partition = new ArrayList<>();
//        partition.add(new LinkedHashSet<>()); // Contains final states
//        partition.add(new LinkedHashSet<>()); // Contains non-final states
//
//        for (State state : this.subsets.values()) {
//            if (state.isFinal())
//                partition.get(0).add(state);
//            else
//                partition.get(1).add(state);
//        }
//
//
//        ArrayList<Set<State>> oldPartition = null;
//        ArrayList<Set<State>> newPartition = null;
//        do {
//            oldPartition = newPartition != null ? newPartition : partition;
//            newPartition = partition(oldPartition);
//        } while (!areEqual(newPartition, oldPartition));
//
//        int l = 0;
//        for (Set<State> set : newPartition) {
//            System.out.println("Set " + l);
//            for (State s : set) {
//                System.out.println(s.getLabel() + " " + s.isStart() + " " + s.isFinal() + " " + s.getToken());
//            }
//
//            l++;
//        }
//
//        ArrayList<State> minimizedStates = assignRepresentatives(newPartition);
////        this.startState = minimizedStates.get(0);
//
//
////        Map<Integer, State> pickedStates = new HashMap<>();
////        for (int i = 0; i < newPartition.size(); i++) {
////            if (newPartition.get(i).size() == 1) {
////                pickedStates.put(i, newPartition.get(i).iterator().next());
////                continue;
////            }
////
////            ArrayList<State> startStates = new ArrayList<>();
////            ArrayList<State> finalStates = new ArrayList<>();
////            ArrayList<State> otherStates = new ArrayList<>();
////
////            for (State state : newPartition.get(i)) {
////                if (state.isStart())
////                    startStates.add(state);
////                else if (state.isFinal())
////                    finalStates.add(state);
////                else
////                    otherStates.add(state);
////            }
////
////
////            if (!otherStates.isEmpty()) {
////                pickedStates.put(i, otherStates.get(0));
////                continue;
////            }
////
////            if (!finalStates.isEmpty()) {
////                finalStates.sort((s1, s2) -> s1.getPriority() - s2.getPriority());
////                pickedStates.put(i, finalStates.get(0));
////                continue;
////            }
////
////            if (!startStates.isEmpty()) {
////                pickedStates.put(i, startStates.get(0));
////                continue;
////            }
////
////
////        }
////
////        for (State state : pickedStates.values()) {
////            for (Edge edge : state.getEdges()) {
////                edge.setTo(getPickedState(edge.getTo(), newPartition, pickedStates));
////            }
////        }
////
////        try {
////            FileWriter writer = new FileWriter("transitionTable.csv");
////
////            for (Character ch : inputSymbols) {
////                writer.append(ch + ",");
////            }
////            writer.append("\n");
////
////            for (State state : pickedStates.values()) {
////                writer.append(state.getLabel() + " ");
////                for (Character ch : inputSymbols) {
////                    String stateLabel = advance(state, ch) == null ? "0" : advance(state, ch).getLabel() + "";
////                    writer.append(stateLabel);
////                    writer.append(",");
////                }
////                writer.append("\n");
////            }
////        } catch (IOException e) {
////            e.printStackTrace();
////        }
////
////
////        System.out.println();
//    }
//
//    private ArrayList<State> assignRepresentatives(ArrayList<Set<State>> partition) {
//        ArrayList<State> states = new ArrayList<>();
//
//        return null;
//    }
//
//    private State getPickedState(State state, ArrayList<Set<State>> partition, Map<Integer, State> pickedStates) {
//        for (int i = 0; i < partition.size(); i++) {
//            if (partition.get(i).contains(state))
//                return pickedStates.get(i);
//        }
//        return null;
//    }
//
//    private ArrayList<Set<State>> partition(ArrayList<Set<State>> partition) {
//        ArrayList<Set<State>> newPartition = new ArrayList<>();
//
//        for (Set<State> set : partition) {
//            if (set.size() == 1) {
//                newPartition.add(set);
//                continue;
//            }
//
//            newPartition.addAll(partition(set, partition));
//        }
//
//        return newPartition;
//    }
//
//    private ArrayList<Set<State>> partition(Set<State> set, ArrayList<Set<State>> partition) {
//        Map<Integer, Integer> stateIndexes = new HashMap();
//        int[][] matrix = new int[set.size()][inputSymbols.size()]; // (state, input) -> set index in current partition
//        ArrayList<Set<State>> setSubsets = new ArrayList<>();
//
//        int i = 0;
//        for (State s : set) {
//            stateIndexes.put(s.getLabel(), i++);
//        }
//
//        for (State s : set) {
//            for (i = 0; i < inputSymbols.size(); i++) {
//                State toState = advance(s, inputSymbols.get(i));
//                matrix[stateIndexes.get(s.getLabel())][i] = getSetIndexForState(toState, partition);
//            }
//        }
//
//        System.out.println();
//        for (int j = 0; j < matrix.length; j++) {
//
//            System.out.println(Arrays.toString(matrix[j]));
//        }
//
//        Set<State> visited = new HashSet<>();
//        for (State s1 : set) {
//            if (visited.contains(s1))
//                continue;
//
//            Set<State> subset = new HashSet<>();
//            int[] setIndexesVector1 = matrix[stateIndexes.get(s1.getLabel())];
//            subset.add(s1);
//            visited.add(s1);
//
//            // Then get all its similar states
//            for (State s2 : set) {
//                if (visited.contains(s2))
//                    continue;
//
//                int[] setIndexesVector2 = matrix[stateIndexes.get(s2.getLabel())];
//                if (areEqual(setIndexesVector1, setIndexesVector2)) {
//                    subset.add(s2);
//                    visited.add(s2);
//                }
//            }
//
//            setSubsets.add(subset);
//        }
//
//        return setSubsets;
//    }
//
//    private boolean areEqual(int[] arr1, int[] arr2) {
//        for (int i = 0; i < arr1.length; i++) {
//            if (arr1[i] != arr2[i])
//                return false;
//        }
//
//        return true;
//    }
//
//    private boolean areEqual(ArrayList<Set<State>> p1, ArrayList<Set<State>> p2) {
//        for (int i = 0; i < p1.size(); i++) {
//            if (!p1.get(0).equals(p2.get(0)))
//                return false;
//        }
//
//        return true;
//    }
//
//    private int getSetIndexForState(State state, ArrayList<Set<State>> partition) {
//        for (int i = 0; i < partition.size(); i++) {
//            if (partition.get(i).contains(state))
//                return i;
//        }
//        return -1;
//    }
//
//
//    private boolean areDistinguishable(State s1, State s2, ArrayList<Set<State>> partition) {
//        boolean distinguishable = false;
//
//        for (Character ch : inputSymbols) {
//            State s1Advanced = advance(s1, ch);
//            State s2Advanced = advance(s2, ch);
//            if (areInDifferentSets(s1Advanced, s2Advanced, partition))
//                distinguishable = true;
//        }
//
//        return distinguishable;
//    }
//
//    private boolean areInDifferentSets(State s1, State s2, ArrayList<Set<State>> partition) {
//        for (Set set : partition) {
//            if (set.contains(s1) && !set.contains(s2))
//                return true;
//            if (set.contains(s2) && !set.contains(s1))
//                return true;
//        }
//
//        return false;
//    }
//
//    private State advance(State state, char input) {
//        for (Edge edge : state.getEdges()) {
//            if (edge.getInput() == input) {
//                return edge.getTo();
//            }
//        }
//        return null;
//    }
//
//    public String advance(char input) {
//        for (Edge edge : current.getEdges()) {
//            if (edge.getInput() == input) {
//                current = edge.getTo();
//
//                return current.isFinal() ? current.getToken() : " ";
//            }
//        }
//
//        return null;
//    }
//
//    public void reset() {
//        current = startState;
//    }
//
//}
